var w=Object.defineProperty;var h=(t,e,a)=>e in t?w(t,e,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[e]=a;var d=(t,e,a)=>h(t,typeof e!="symbol"?e+"":e,a);import{L as i}from"./Logging-BGLwk1OE.js";import{m as g,i as l}from"./interp-BFp6dTGs.js";const p={frameRate:44100,frqFrameRate:44100,depth:16,worldPeriod:5/1e3},W=(t,e)=>new Promise(a=>{const o=r=>{e(r.data)&&(t.removeEventListener("message",o),a(r.data))};t.addEventListener("message",o)});let v=0;const y=async(t,e,a,o)=>{i.info(`wavデータの読込:${t}`,"resampWorker.getWaveData");try{const r=await o.getWave(t),s=Math.floor(p.frameRate*e/1e3),m=a<0?e-a:r.data.length/r.sampleRate*1e3-a,f=Math.floor(p.frameRate*m/1e3);return r.LogicalNormalize(1).slice(s,f)}catch(r){throw i.error(`wavデータの読込に失敗:${t}`,"resampWorker.getWaveData"),r}},R=async(t,e,a,o)=>{i.info(`frqデータの読込:${t}`,"resampWorker.getFrqData");try{const r=g(p.worldPeriod,0,a/1e3),s=await o.getFrq(t),m=g(1/p.frqFrameRate*s.perSamples,0,a/1e3),f=Math.floor(p.frameRate*e/(s.perSamples*1e3)),n=Math.ceil(p.frameRate*a/(s.perSamples*1e3))+1;i.debug(`offsetFrame:${f},cutoffFrame:${n}`,"resampWorker.getFrqData");const c=l(Array.from(s.frq).slice(f,f+n),m,r),k=l(Array.from(s.amp).slice(f,f+n),m,r);return{frq:c,amp:k,timeAxis:r,frqAverage:s.frqAverage}}catch(r){throw i.error(`frqデータの読込に失敗:${t}`,"resampWorker.getFrqData"),r}};class q{constructor(){d(this,"worker");d(this,"isReady",!1);d(this,"readyPromise");i.info("resamp workerのロード開始","resampWorker.ResampWorkerService"),this.worker=new Worker(new URL("/tsuru/assets/resamp-cajkZkfg.js",import.meta.url),{type:"module"}),this.worker.addEventListener("message",e=>{e.data&&e.data.type==="debug"&&i.debug(`resamp workerからのデバッグメッセージ:${e.data.data}`,"resampWorker.ResampWorkerService")}),this.readyPromise=new Promise(e=>{const a=o=>{o.data&&o.data.type==="ready"&&(i.info("resamp workerのロード完了","resampWorker.Worker"),this.isReady=!0,this.worker.removeEventListener("message",a),e())};this.worker.addEventListener("message",a)})}async waitUntilReady(){return this.readyPromise}async processResamp(e,a){await this.waitUntilReady(),i.info("wav生成request準備","resampWorker.ResampWorkerService");let o;try{o=await y(e.inputWav,e.offsetMs,e.cutoffMs,a)}catch(c){throw c}i.debug(`取得したwav長:${o.length}`,"resampWorker.ResampWorkerService");let r;try{r=await R(e.inputWav,e.offsetMs,o.length/p.frameRate*1e3,a)}catch(c){throw c}const s={inputWav:e.inputWav,targetTone:e.targetTone,velocity:e.velocity,flags:e.flags,offsetMs:e.offsetMs,targetMs:e.targetMs,fixedMs:e.fixedMs,cutoffMs:e.cutoffMs,intensity:e.intensity,modulation:e.modulation,tempo:e.tempo,pitches:e.pitches,inputWavData:Float64Array.from(o),frqData:Float64Array.from(r.frq),ampData:Float64Array.from(r.amp),frqAverage:r.frqAverage},m=v++,f=W(this.worker,c=>c.id===m);i.debug(`workerにwav生成リクエスト送信:${JSON.stringify({...e,inputWavData:o.length,frqData:r.frq.length,ampData:r.amp.length,frqAverage:r.frqAverage})}、requestId:${m}`,"resampWorker.ResampWorkerService"),this.worker.postMessage({id:m,request:s},[s.inputWavData.buffer,s.frqData.buffer,s.ampData.buffer]);const n=await f;if(n.error)throw i.error(`requestId:${m}、${n.error}`,"resampWorker.Worker"),new Error(n.error);return i.info(`wav生成完了。requestId:${m}`,"resampWorker.ResampWorkerService"),n.result}terminate(){this.worker.terminate()}}export{q as R,p as r};
